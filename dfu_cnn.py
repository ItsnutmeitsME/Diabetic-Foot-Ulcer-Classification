# -*- coding: utf-8 -*-
"""DFU_CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_fOWJMh35F7c-2xPKMFx7DaqIZuaHsDd
"""

import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator

tf.__version__

test_dir = 'ThermoDataBase/dataset/val'

# daTa preprocesing of trainign

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

training_set = train_datagen.flow_from_directory(
        'dataset/train',
        target_size=(64, 64),
        batch_size=32,
        class_mode='binary')

# Data preprocessing of test

test_datagen = ImageDataGenerator(rescale=1./255)
test_set = test_datagen.flow_from_directory(
        'dataset/val',
        target_size=(64, 64),
        batch_size=32,
        class_mode='binary')

cnn = tf.keras.models.Sequential()
cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
cnn.add(tf.keras.layers.Flatten())
cnn.add(tf.keras.layers.Dense(units = 128, activation='relu'))
cnn.add(tf.keras.layers.Dense(units = 1, activation='sigmoid'))

cnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

cnn.fit(x = training_set, validation_data = test_set, epochs = 25)

y_true = []
y_pred = []

# Iterate through each class directory
for class_name in os.listdir(test_dir):
    class_dir = os.path.join(test_dir, class_name)
    if os.path.isdir(class_dir):
        for img_name in os.listdir(class_dir):
            img_path = os.path.join(class_dir, img_name)
            if img_path.endswith('.png') or img_path.endswith('.jpg'):
                # Load and preprocess image
                test_image = image.load_img(img_path, target_size=(64, 64))
                test_image = image.img_to_array(test_image)
                test_image = np.expand_dims(test_image, axis=0)
                test_image /= 255.0

                # Predict
                result = cnn.predict(test_image)
                if result[0][0] > 0.5:
                    y_pred.append(1)  # Assuming 1 corresponds to 'DFU'
                else:
                    y_pred.append(0)  # Assuming 0 corresponds to 'Normal skin'

                # Append true label
                if class_name == 'DMG':  # Replace 'DMG' with the actual class directory name for 'DFU'
                    y_true.append(1)
                else:
                    y_true.append(0)

# Generate confusion matrix
cm = confusion_matrix(y_true, y_pred)

# Visualize the confusion matrix
plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Normal skin', 'DFU'], yticklabels=['Normal skin', 'DFU'])
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

# Alternatively, using sklearn's ConfusionMatrixDisplay
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Normal skin', 'DFU'])
disp.plot(cmap='Blues')
plt.show()